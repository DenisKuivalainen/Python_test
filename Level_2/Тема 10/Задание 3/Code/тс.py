"""
Куйвалайнен Д.А.
kuyvalaynen@gmail.com
ЗЕБЗ-01-16
"""

import time


class ТранспортноеСредство:
    """Класс ТранспортноеСредство содержит общие атрибуты для ТС.
    Дочерние классы будут их конкретизировать.
    """

    __километры = 0  # счетчик километров

    def __init__(self):
        """Конструктор класса.
        Инициализирует атрибуты транспортного средства.
        """
        self._вид_тс = "Транспортное средство"
        self._топливо = 10
        self.скорость = 1
        self.расход = 1

    def __str__(self):
        """Возвращает строковое представление класса"""

        строка = "Информация о транспортном средстве:"
        строка += "\nВидТС: {}".format(self._вид_тс)
        строка += "\nТопливо: {} л".format(self._топливо)
        строка += "\nСкорость: {} км/ч".format(self.скорость)
        строка += "\nРасход: {} л/км".format(self.расход)
        return строка

    def ехать(self, сообщение2="Еду на транспортном средстве",
              сообщение1="Не могу ехать, кончилось топливо",
              сообщение3=" - Проехал - {} км \n - Осталось топлива - {} л",
              сообщение4="Останавливаюсь... Кончилось топливо"):
        """Базовый метод класса
        осуществляет движение транспортного средства
        """
        if not self._топливо:
            print(сообщение1)
            return
        print(сообщение2)
        while self._топливо:
            time.sleep(1)
            self.__кол_километров()  # количество километров
            self._остаток_топлива()  # остаток топлива
            print(сообщение3.format(self.__километры, self._топливо))
        print(сообщение4)

    def _остаток_топлива(self, расход=1):
        """Считает остаток топлива"""

        if self._топливо >= self.расход:
            self._топливо -= self.расход
        else:
            self._топливо = 0

    def __кол_километров(self, скорость=1):
        """Считает количество пройденных километров"""

        if self._топливо >= self.расход:
            self.__километры += self.скорость
        else:
            self.__километры += self.скорость * self._топливо / self.расход


class ВодноеТС(ТранспортноеСредство):
    """Класс ВодноеТС дополняет класс ТранспортноеСредство"""

    def __init__(self):
        self._вид_тс = "водноеТС"
        self._топливо = 40
        self.скорость = 30
        self.расход = 5
        self.удаление_от_берега = 50
        self.__высота_волны = 1

    def __str__(self):
        """Дополнение строкового представления класса ТранспортноеСредство"""
        строка = "\nУдаление от берега: {}км\nВысота_волны: {} м".\
                 format(self.удаление_от_берега, self.__высота_волны)
        return super().__str__() + строка

    def ехать(self):
        """Осуществляет движение водного тс с помощью базового метода
        класса ТранспортноеСредство
        """

        сообщение1 = "Не могу плыть, кончилось топливо"
        сообщение2 = "Плыву на водном ТС на удалении от берега {} км"\
                     "\nВысота волны - {} м".format(self.удаление_от_берега,
                                                    self.__высота_волны)
        сообщение3 = " - Проплыл - {} км \n - Осталось топлива - {} л"
        сообщение4 = "Причаливаю... Кончилось топливо"

        if not self._топливо:
            print(сообщение1)
            return

        self._отплыть()
        super().ехать(сообщение2, сообщение1, сообщение3, сообщение4)
        self.__причалить()

    def _отплыть(self):
        """Отплывает от берега"""
        print("Отплываю от берега на расстояние {}км".
              format(self.удаление_от_берега))

    def __причалить(self):
        """Причаливает к берегу"""
        print("Причалил к берегу")


class КолесноеТС(ТранспортноеСредство):
    """Класс КолесноеТС дополняет класс ТранспортноеСредство"""

    def __init__(self, топливо=0, скорость=60, расход=5, бак=60):
        """Инициализация класса"""

        self._вид_тс = "колесноеТС"
        assert self._проверка(топливо) and self._проверка(скорость)\
            and self._проверка(расход) and self._проверка(бак),\
            "Передаваемые значения не типа 'int'"

        self._топливо = топливо
        self.скорость = скорость
        self.расход = расход
        self.__бак = бак

    def __str__(self):
        """Строковое представление класса КолесноеТС"""
        return super().__str__() + "\nБак: {}л".format(self.__бак)

    def ехать(self, сообщение2="Еду на колесном ТС"):
        """Осуществляет движение колесного тс с помощью вызова
        базового метода класса ТранспортноеСредство
        """
        super().ехать(сообщение2)

    def заправить(self, топливо):
        """Заправляет КолесноеТС
        если топливо не вмещается в бак, не производит заправку
        """
        if not self._проверка(топливо):
            print("Не могу заправить бак")
            return
        if self._вместимость(топливо):
            self.__заправка(топливо)
            print("Бак заправлен на {}л".format(топливо))
        else:
            print("Столько топлива в бак не влезет!")

    def _проверка(self, значение):
        """Проверка передаваемых значений"""
        return isinstance(значение, int)

    def __заправка(self, топливо):
        """Прибавляет к остатку топлива переданный параметр"""
        self._топливо += топливо

    def _вместимость(self, топливо):
        """Проверяет, вмещается ли в бак топливо"""
        return self._топливо + топливо <= self.__бак


class Автомобиль(КолесноеТС):
    """Класс Автомобиль дополняет класс КолесноеТС"""

    def __init__(self):
        """Инициализация класса"""
        self._топливо = 60
        self.скорость = 100
        self.расход = 8
        self.__бак = 60
        super().__init__(self._топливо, self.скорость, self.расход, self.__бак)

        self.тип_тс = "автомобиль"
        self.марка = "Ford"
        self.модель = "Focus"
        self.цвет = "черный"

    def __str__(self):
        """Строковое представление класса Автомобиль"""
        строка = "\nТип ТС: {}".format(self.тип_тс)
        строка += "\nМарка: {}".format(self.марка)
        строка += "\nМодель: {}".format(self.модель)
        строка += "\nЦвет: {}".format(self.цвет)

        return super().__str__() + строка

    def ехать(self):
        """Осуществляет движение автомобиля с помощью вызова
        базового метода класса ТранспортноеСредство
        """
        сообщение2 = "Еду на автомобиле {} {} цвет - {}".format(self.марка,
                                                                self.модель,
                                                                self.цвет)
        super().ехать(сообщение2)

    def заправить(self, топливо):
        """Заправляет бак с помощью метода заправить() классса КолесноеТС"""
        if self._проверка(топливо):
            топливо = self.__вместимость(топливо)
            return super().заправить(топливо)
        else:
            print("Не могу заправить бак")

    def __вместимость(self, топливо):
        """Проверяет вместимость топлива в бак,
        лишнее топливо опускает
        """
        if not super()._вместимость(топливо):
            топливо = self.__бак - self._топливо
        return топливо
